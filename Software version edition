<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CVE Analyzer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
    <style>
        /* Center the app container */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #ffffff;
            color: #333333;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        #app-container {
            width: 80%;
            max-width: 800px;
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        h1 {
            color: #007bff;
            margin-top: 0;
        }
        #drop-area {
            border: 2px dashed #007bff;
            background-color: #ffffff;
            color: #333333;
            padding: 20px;
            cursor: pointer;
            margin-bottom: 20px;
        }
        button {
            margin: 10px;
            padding: 10px;
            background-color: #007bff;
            border: none;
            color: #ffffff;
            cursor: pointer;
            border-radius: 4px;
        }
        button:hover {
            background-color: #0056b3;
        }
        /* Modal styles */
        #copyrightModal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            justify-content: center;
            align-items: center;
        }
        #modalContent {
            background-color: #ffffff;
            padding: 20px;
            width: 80%;
            max-width: 600px;
            border-radius: 8px;
            text-align: center;
            color: #333333;
        }
        #modalContent h2 {
            color: #007bff;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div id="app-container">
        <div id="copyrightModal">
            <div id="modalContent">
                <h2>Copyright Notice</h2>
                <p>
                    Project Name: CVE Analyzer Web Application<br>
                    Author: Nqobile Livhuwani Mashaba<br>
                    Date: 25 October 2024<br><br>
                    Â© 2024 Nqobile Livhuwani Mashaba. All rights reserved.
                </p>
                <button onclick="closeModal()">I Acknowledge</button>
            </div>
        </div>

        <h1>CVE Analyzer</h1>
        <div id="drop-area">
            <p>Drag and drop your CSV/XLSX file here, or click to select a file.</p>
            <input type="file" id="fileInput" accept=".xlsx,.csv" style="display: none;">
        </div>
        <button id="generateCriticalPdfButton" style="display: none;">Generate Critical CVE Report PDF</button>
        <button id="generateHighPdfButton" style="display: none;">Generate High CVE Report PDF</button>
    </div>

    <script>
        window.onload = function() {
            document.getElementById('copyrightModal').style.display = 'flex';
        };

        function closeModal() {
            document.getElementById('copyrightModal').style.display = 'none';
        }

        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('fileInput');
        const generateCriticalPdfButton = document.getElementById('generateCriticalPdfButton');
        const generateHighPdfButton = document.getElementById('generateHighPdfButton');
        let cveData = [];

        dropArea.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFileSelect, false);
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }

        function handleFileSelect(e) {
            const files = e.target.files;
            handleFiles(files);
        }

        function handleFiles(files) {
            const file = files[0];
            if (file && file.name.match(/\.(csv|xlsx)$/i)) {
                processFile(file);
            } else {
                alert('Unsupported file type. Please upload a CSV or XLSX file.');
            }
        }

        function formatTimestamp(timestamp) {
            let date;
            try {
                if (timestamp.includes('@')) {
                    date = new Date(timestamp.replace('@', '').trim());
                } else if (timestamp.match(/\d{4}-\d{2}-\d{2}/)) {
                    date = new Date(timestamp);
                } else {
                    date = new Date(Date.parse(timestamp));
                }
            } catch (e) {
                return 'Invalid Date';
            }

            if (!timestamp || isNaN(date.getTime())) {
                return 'Invalid Date';
            }
            return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()} ` +
                   `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;
        }

        function processFile(file) {
            const reader = new FileReader();
            if (file.name.match(/\.csv$/i)) {
                reader.onload = e => {
                    const text = e.target.result;
                    const results = Papa.parse(text, { header: true });
                    cveData = results.data.map(item => {
                        if (item['timestamp']) {
                            item['formattedTimestamp'] = formatTimestamp(item['timestamp']);
                        } else {
                            item['formattedTimestamp'] = 'N/A';
                        }
                        return item;
                    });
                    generateCriticalPdfButton.style.display = 'inline-block';
                    generateHighPdfButton.style.display = 'inline-block';
                };
                reader.readAsText(file);
            } else if (file.name.match(/\.xlsx$/i)) {
                reader.onload = e => {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
                    cveData = XLSX.utils.sheet_to_json(worksheet).map(item => {
                        if (item['timestamp']) {
                            item['formattedTimestamp'] = formatTimestamp(item['timestamp']);
                        } else {
                            item['formattedTimestamp'] = 'N/A';
                        }
                        return item;
                    });
                    generateCriticalPdfButton.style.display = 'inline-block';
                    generateHighPdfButton.style.display = 'inline-block';
                };
                reader.readAsArrayBuffer(file);
            }
        }

        generateCriticalPdfButton.addEventListener('click', () => generatePDFReport('Critical'));
        generateHighPdfButton.addEventListener('click', () => generatePDFReport('High'));

        function generatePDFReport(severity) {
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF();
            pdf.setFont("Helvetica", "normal");
            pdf.setFontSize(10);
            const filteredData = cveData.filter(item => item['data.vulnerability.severity'] === severity);

            pdf.setFontSize(14);
            pdf.setTextColor(0, 102, 204);
            pdf.text(`${severity} Severity CVEs Summary`, 10, 15);

            const summary = {
                totalCVEs: filteredData.length,
                totalSolved: filteredData.filter(item => item['data.vulnerability.status'] === 'Solved').length,
                totalActive: filteredData.filter(item => item['data.vulnerability.status'] === 'Active').length,
                totalAgents: new Set(filteredData.map(item => item['agent.name'])).size,
                agentsWithMultipleCVEs: Object.values(filteredData.reduce((acc, item) => {
                    acc[item['agent.name']] = (acc[item['agent.name']] || 0) + 1;
                    return acc;
                }, {})).filter(count => count > 1).length,
                mostFrequentCVE: Object.entries(filteredData.reduce((acc, item) => {
                    acc[item['data.vulnerability.cve']] = (acc[item['data.vulnerability.cve']] || 0) + 1;
                    return acc;
                }, {})).reduce((a, b) => a[1] > b[1] ? a : b, ['', 0])[0]
            };

            pdf.setFontSize(10);
            pdf.setTextColor(0, 0, 0);
            pdf.text(`Total Agents Analyzed: ${summary.totalAgents}`, 10, 25);
            pdf.text(`Total Agents with More Than One CVE: ${summary.agentsWithMultipleCVEs}`, 10, 33);
            pdf.text(`Most Frequent CVE ID: ${summary.mostFrequentCVE}`, 10, 41);
            pdf.text(`Total ${severity} CVEs: ${summary.totalCVEs}`, 10, 49);
            pdf.text(`Total Solved: ${summary.totalSolved}, Total Active: ${summary.totalActive}`, 10, 57);

            let yOffset = 70;
            const groupedData = {};
            filteredData.forEach(item => {
                const asset = item['agent.name'] || 'Unknown';
                if (!groupedData[asset]) groupedData[asset] = { CVEs: [], count: 0 };
                groupedData[asset].CVEs.push(item);
                groupedData[asset].count += 1;
            });

            const sortedAssets = Object.keys(groupedData).sort((a, b) => groupedData[b].count - groupedData[a].count);
            sortedAssets.forEach(asset => {
                pdf.setFontSize(12);
                pdf.setTextColor(50, 50, 50);
                pdf.setFont("Helvetica", "bold");
                pdf.text(`Asset Name: ${asset} (Total CVEs: ${groupedData[asset].count})`, 10, yOffset);
                yOffset += 10;

                pdf.setFontSize(10);
                pdf.setFont("Helvetica", "normal");
                ['Solved', 'Active'].forEach(status => {
                    const CVEsForStatus = groupedData[asset].CVEs.filter(cve => cve['data.vulnerability.status'] === status);
                    if (CVEsForStatus.length) {
                        pdf.setFont("Helvetica", "italic");
                        pdf.setTextColor(80, 80, 80);
                        pdf.text(`Status: ${status}`, 10, yOffset);
                        yOffset += 10;

                        const headers = [['CVE ID', 'Severity', 'Software', 'Software Version', 'Date & Time']];
                        const rows = CVEsForStatus.map(item => [
                            item['data.vulnerability.cve'],
                            item['data.vulnerability.severity'],
                            item['data.vulnerability.package.name'],
                            item['data.vulnerability.package.version'] || 'N/A',
                            item['formattedTimestamp']
                        ]);

                        pdf.autoTable({
                            head: headers,
                            body: rows,
                            startY: yOffset,
                            headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0] },
                            margin: { left: 10, right: 10 },
                        });

                        yOffset = pdf.lastAutoTable.finalY + 10;
                    }
                });
            });

            pdf.save(`${severity}_CVE_Report.pdf`);
        }
    </script>
</body>
</html>
